[{"name": "app.py", "content": "#%% packages\nfrom shiny import Inputs, Outputs, Session, App, reactive, render, req, ui\nimport pandas as pd\nimport jinja2 as jn\nimport numpy as np\nfrom plotnine import ggplot, aes, geom_line, geom_smooth, coord_cartesian, labs, scale_color_discrete, theme_bw, coord_cartesian, theme, element_rect, element_line, element_text, annotate, geom_vline, scale_color_manual\nimport seaborn as sns\nfrom pathlib import Path\n#%% data prep\nPerformance_Data = pd.read_csv(Path(__file__).parent / 'Performance.csv')\n\nPerformance_Data['Date_Time'] = pd.to_datetime(Performance_Data['Date'], format=\"%d/%m/%Y\")\nPerformance_Data.drop(axis=1, columns=['Date'], inplace=True)  # Date column not required anymore\n\n#%% set up input values\nPerformance_Long = Performance_Data.melt(id_vars='Date_Time', value_name='Performance', var_name='Strategy').reset_index(drop=True)\n\ndate_range_start = np.min(Performance_Long['Date_Time'])\ndate_range_end = np.max(Performance_Long['Date_Time'])\n\n#%%\n# languages.info()\n# languages.describe()\n\n#%% values for dropdown field\nStrategy_Names = Performance_Long['Strategy'].unique()\nStrategy_Names_Dict = {l:l for l in Strategy_Names}\n\n#%% app\ndef panel_box(*args, **kwargs):\n    return ui.div(\n        ui.div(*args, class_=\"card-body\"),\n        **kwargs,\n        class_=\"card mb-3\",\n    )\n\n\napp_ui = ui.page_fluid(\n    ui.panel_title('Global Macro Performance Review'),\n    ui.row(\n        ui.column(4,\n                  panel_box(\n                    ui.input_selectize(id=\"Strategy\", label=\"Choose Strategies\", choices=Strategy_Names_Dict, selected=[\"Total\", \"Fundamental\", \"Tactical\", \"Momentum\", \"Target\"], multiple=True,),\n                    ui.input_date_range(id='date_range', label='Date Range', start=date_range_start, end=date_range_end,),\n                    ui.input_radio_buttons(id=\"rb\", label=\"Style Correlation\", choices={\"a\": \"Correlation On\", \"b\":\"Correlation Off\"}, selected=\"a\"), style=\"background-color:#D3D3D3\")    \n        ),\n        ui.column(7,\n            ui.output_plot(\"plotTimeseries\", width=\"100%\")),\n        ui.column(1,)\n        ),\n    ui.row(\n        ui.column(4,),\n        ui.column(7, ui.output_table(\"Stat_table\", style=\"text-align:center;\")),\n        ui.column(1,)\n    ),\n    ui.row(\n        ui.column(4),\n        ui.column(7, ui.output_table(\"Corr_table\", style=\"text-align:center;\")),\n        ui.column(1,)\n    )   \n) \n\n#%%\ndef server(input: Inputs, output: Outputs, session: Session):\n    # Preparation of Chart\n    @reactive.Calc\n    def performance_filt():\n        date_selected_start = str(input.date_range()[0])\n        date_selected_end = str(input.date_range()[1])\n        l = Performance_Long.loc[(Performance_Long['Strategy'].isin(list(input.Strategy()))) & (Performance_Long['Date_Time']>= date_selected_start) & (Performance_Long['Date_Time']<= date_selected_end)].reset_index(drop=True)\n        return l\n\n    # Calculation for Stats Table\n    @reactive.Calc\n    def stat_table():\n        date_selected_start = str(input.date_range()[0])\n        date_selected_end = str(input.date_range()[1])\n        \n        # Filter for selection and choose column \"Performance\"\n        data_Total = Performance_Long.loc[(Performance_Long['Strategy'] == \"Total\") & (Performance_Long['Date_Time']>= date_selected_start) & (Performance_Long['Date_Time']<= date_selected_end)][\"Performance\"].reset_index(drop=True)\n        data_Tactical = Performance_Long.loc[(Performance_Long['Strategy'] == \"Tactical\") & (Performance_Long['Date_Time']>= date_selected_start) & (Performance_Long['Date_Time']<= date_selected_end)][\"Performance\"].reset_index(drop=True)\n        data_Momentum = Performance_Long.loc[(Performance_Long['Strategy'] == \"Momentum\") & (Performance_Long['Date_Time']>= date_selected_start) & (Performance_Long['Date_Time']<= date_selected_end)][\"Performance\"].reset_index(drop=True)\n        data_Fundamental = Performance_Long.loc[(Performance_Long['Strategy'] == \"Fundamental\") & (Performance_Long['Date_Time']>= date_selected_start) & (Performance_Long['Date_Time']<= date_selected_end)][\"Performance\"].reset_index(drop=True)\n        \n        # Calculate Performance over period\n        k = len(data_Total)-1\n        #m = int(date_selected_start)\n        #print(m)\n        perf_Total = (data_Total[k] / data_Total[0]) -1\n        perf_Total_ann = (data_Total[k] / data_Total[0]) ** (250/k) -1\n        perf_Total_f = \"{:.2%}\".format(perf_Total)\n        perf_Total_ann_f = \"{:.2%}\".format(perf_Total_ann)\n   \n        perf_Tactical = (data_Tactical[k] / data_Tactical[0]) -1\n        perf_Tactical_ann = (data_Tactical[k] / data_Tactical[0])  ** (250/k) -1\n        perf_Tactical_f = \"{:.2%}\".format(perf_Tactical)\n        perf_Tactical_ann_f = \"{:.2%}\".format(perf_Tactical_ann)\n        \n        perf_Momentum = (data_Momentum[k] / data_Momentum[0]) -1\n        perf_Momentum_ann = (data_Momentum[k] / data_Momentum[0])  **(250/k) -1\n        perf_Momentum_f = \"{:.2%}\".format(perf_Momentum)\n        perf_Momentum_ann_f = \"{:.2%}\".format(perf_Momentum_ann)\n        \n        perf_Fundamental = (data_Fundamental[k] / data_Fundamental[0]) -1\n        perf_Fundamental_ann = (data_Fundamental[k] / data_Fundamental[0])  ** (250/k) -1\n        perf_Fundamental_f = \"{:.2%}\".format(perf_Fundamental)\n        perf_Fundamental_ann_f = \"{:.2%}\".format(perf_Fundamental_ann)\n\n        #Calculate Volatility over period\n        returns_Total = data_Total.pct_change()\n        stdev_Total = returns_Total.std() * np.sqrt(250)\n        stdev_Total_f = \"%.2f%%\" % (stdev_Total*100)\n        returns_Fundamental = data_Fundamental.pct_change()\n        stdev_Fundamental = returns_Fundamental.std() * np.sqrt(250)\n        stdev_Fundamental_f = \"%.2f%%\" % (stdev_Fundamental*100)\n        returns_Momentum = data_Momentum.pct_change()\n        stdev_Momentum = returns_Momentum.std() * np.sqrt(250)\n        stdev_Momentum_f = \"%.2f%%\" % (stdev_Momentum*100)\n        returns_Tactical = data_Tactical.pct_change()\n        stdev_Tactical = returns_Tactical.std() * np.sqrt(250)\n        stdev_Tactical_f = \"%.2f%%\" % (stdev_Tactical*100)\n\n        #Calculate IR over period\n        ir_Total = perf_Total_ann / stdev_Total\n        ir_Total_f = \"%.2f\" % (ir_Total)\n        ir_Fundamental = perf_Fundamental_ann / stdev_Tactical\n        ir_Fundamental_f = \"%.2f\" % (ir_Fundamental)\n        ir_Momentum = perf_Momentum_ann / stdev_Momentum\n        ir_Momentum_f = \"%.2f\" % (ir_Momentum)\n        ir_Tactical = perf_Tactical_ann / stdev_Tactical\n        ir_Tactical_f = \"%.2f\" % (ir_Tactical)\n                \n        table = pd.DataFrame({'Strategy': ['Total', 'Fundamental', 'Momentum', \"Tactical\"], 'Performance': [perf_Total_f, perf_Fundamental_f, perf_Momentum_f, perf_Tactical_f], 'Performance (ann)': [perf_Total_ann_f, perf_Fundamental_ann_f, perf_Momentum_ann_f, perf_Tactical_ann_f], 'Volatility': [stdev_Total_f, stdev_Fundamental_f, stdev_Momentum_f, stdev_Tactical_f], \"IR\": [ir_Total_f,ir_Fundamental_f,ir_Momentum_f,ir_Tactical_f]})\n        \n        tab = table.loc[(table['Strategy'].isin(list(input.Strategy())))]\n        return tab\n    \n    # Calculation for Stats Table\n    @reactive.Calc\n    def corr_table():\n        #Calculate Correlations\n        date_selected_start = str(input.date_range()[0])\n        date_selected_end = str(input.date_range()[1])\n        \n        data_Tactical = Performance_Long.loc[(Performance_Long['Strategy'] == \"Tactical\") & (Performance_Long['Date_Time']>= date_selected_start) & (Performance_Long['Date_Time']<= date_selected_end)][\"Performance\"].reset_index(drop=True)\n        data_Momentum = Performance_Long.loc[(Performance_Long['Strategy'] == \"Momentum\") & (Performance_Long['Date_Time']>= date_selected_start) & (Performance_Long['Date_Time']<= date_selected_end)][\"Performance\"].reset_index(drop=True)\n        data_Fundamental = Performance_Long.loc[(Performance_Long['Strategy'] == \"Fundamental\") & (Performance_Long['Date_Time']>= date_selected_start) & (Performance_Long['Date_Time']<= date_selected_end)][\"Performance\"].reset_index(drop=True)\n        \n        returns_Fundamental = data_Fundamental.pct_change()\n        returns_Tactical = data_Tactical.pct_change()\n        returns_Momentum = data_Momentum.pct_change()\n\n        corr_Momentum_Tactical = \"{:.2}\".format(returns_Momentum.corr(returns_Tactical))\n        corr_Momentum_Fundamental = \"{:.2}\".format(returns_Momentum.corr(returns_Fundamental))\n        corr_Tactical_Fundamental = \"{:.2}\".format(returns_Tactical.corr(returns_Fundamental))\n\n        corr_tab = pd.DataFrame({'Correlation': ['Fundamental', 'Momentum', \"Tactical\"], 'Fundamental': [1,corr_Momentum_Fundamental , corr_Tactical_Fundamental], 'Momentum': [\"\", 1, corr_Momentum_Tactical], 'Tactical': [\"\", \"\", 1]})\n\n        return corr_tab\n\n\n    # Output\n    @output\n    @render.plot\n    def plotTimeseries():\n        g = ggplot(performance_filt(), aes('Date_Time', 'Performance', color=\"Strategy\")) + geom_line() + theme(plot_background=element_rect(fill='white'), panel_background=element_rect(fill='white'), rect=element_rect(size=0, fill='#fff'), axis_text_x=element_text(rotation=90, hjust=1), panel_grid_major_y=element_line(color=\"grey\"), legend_position=\"right\", legend_margin=(20)) + labs(x = 'Date', y='Performance Index', title='Global Macro Strategy Performance') + coord_cartesian(ylim=[98,103])\n        return g\n    \n    @output\n    @render.table\n    def Stat_table():\n        stats = stat_table()\n        return stats\n    \n    @output\n    @render.table\n    def Corr_table():\n        if input.rb() == \"a\":\n            corr = corr_table()\n        else:\n            corr = pd.DataFrame()\n        return corr\n    \napp = App(app_ui, server)\n\n# %%", "type": "text"}, {"name": "Performance.csv", "content": "Date,Total,Fundamental,Momentum,Tactical,Target\n18/11/2022,100.00,100.00,100.00,100.00,100\n21/11/2022,100.06,99.96,100.04,100.06,100.04\n22/11/2022,100.10,100.02,99.99,100.09,100.05\n23/11/2022,99.92,100.07,99.97,99.88,100.07\n25/11/2022,99.97,100.10,99.99,99.88,100.10\n28/11/2022,100.18,100.07,100.05,100.07,100.14\n29/11/2022,100.06,100.07,99.99,100.00,100.15\n30/11/2022,99.90,100.15,99.88,99.86,100.16\n01/12/2022,99.93,100.24,99.85,99.84,100.18\n02/12/2022,99.96,100.26,99.87,99.83,100.19\n05/12/2022,100.51,100.13,100.05,100.33,100.23\n06/12/2022,101.00,100.17,100.15,100.68,100.25\n07/12/2022,101.12,100.22,100.18,100.72,100.26\n08/12/2022,101.14,100.20,100.16,100.78,100.27\n09/12/2022,101.19,100.16,100.23,100.79,100.29\n12/12/2022,101.18,100.24,100.18,100.76,100.33\n13/12/2022,101.18,100.25,100.10,100.82,100.34\n14/12/2022,101.13,100.25,100.09,100.79,100.36\n15/12/2022,101.26,100.19,100.21,100.87,100.37\n16/12/2022,101.34,100.19,100.26,100.88,100.38\n19/12/2022,101.37,100.19,100.29,100.88,100.42\n20/12/2022,101.36,100.19,100.29,100.89,100.44\n21/12/2022,101.45,100.21,100.28,100.96,100.45\n22/12/2022,101.47,100.21,100.29,100.97,100.47\n23/12/2022,101.42,100.16,100.27,100.99,100.48\n27/12/2022,101.54,100.21,100.29,101.04,100.53\n28/12/2022,101.52,100.19,100.27,101.06,100.55\n29/12/2022,101.39,100.14,100.25,101.00,100.56\n30/12/2022,101.25,100.07,100.21,100.98,100.58\n03/01/2023,101.37,100.13,100.24,101.00,100.63\n04/01/2023,101.41,100.22,100.18,101.01,100.64\n05/01/2023,101.59,100.25,100.22,101.12,100.66\n06/01/2023,101.38,100.18,100.14,101.05,100.67\n09/01/2023,101.32,100.12,100.12,101.08,100.71\n10/01/2023,101.24,100.08,100.10,101.07,100.73\n11/01/2023,101.13,100.14,100.00,100.99,100.74\n12/01/2023,100.77,100.11,99.87,100.80,100.75\n13/01/2023,100.61,100.08,99.78,100.75,100.77\n17/01/2023,100.82,100.14,99.84,100.84,100.82\n18/01/2023,101.06,100.11,99.94,101.01,100.84\n19/01/2023,101.09,100.08,99.94,101.08,100.85\n20/01/2023,100.84,100.11,99.83,100.91,100.86\n23/01/2023,100.74,100.11,99.79,100.83,100.90\n24/01/2023,100.64,100.06,99.77,100.81,100.92\n25/01/2023,100.49,100.03,99.75,100.71,100.93\n26/01/2023,100.50,100.13,99.75,100.62,100.95\n27/01/2023,100.37,100.01,99.74,100.61,100.96\n30/01/2023,100.60,99.99,99.82,100.79,101.00\n31/01/2023,100.49,100.05,99.72,100.73,101.01\n01/02/2023,100.13,100.15,99.60,100.38,101.03\n02/02/2023,100.41,100.22,99.58,100.62,101.04\n03/02/2023,100.75,100.06,99.56,101.13,101.05\n06/02/2023,101.02,99.93,99.62,101.48,101.10\n07/02/2023,100.99,99.93,99.62,101.44,101.11\n08/02/2023,100.90,99.81,99.64,101.46,101.12\n09/02/2023,100.84,99.73,99.67,101.45,101.14\n10/02/2023,100.92,99.75,99.67,101.50,101.15\n13/02/2023,100.80,99.70,99.65,101.45,101.19\n14/02/2023,100.75,99.72,99.66,101.38,101.21\n15/02/2023,100.82,99.73,99.65,101.44,101.22\n16/02/2023,100.88,99.66,99.68,101.55,101.23\n17/02/2023,100.77,99.66,99.66,101.46,101.25\n21/02/2023,100.57,99.22,99.78,101.59,101.30\n22/02/2023,100.58,99.21,99.81,101.58,101.32\n23/02/2023,100.61,99.27,99.79,101.56,101.33\n24/02/2023,100.49,99.04,99.82,101.65,101.34\n27/02/2023,100.58,99.15,99.84,101.61,101.38\n28/02/2023,100.63,99.17,99.87,101.61,101.40\n01/03/2023,100.79,99.40,99.79,101.61,101.41\n02/03/2023,100.87,99.47,99.79,101.61,101.42\n03/03/2023,101.01,99.66,99.76,101.60,101.44\n06/03/2023,100.74,99.41,99.74,101.60,101.48\n07/03/2023,100.80,99.20,99.83,101.78,101.49\n08/03/2023,100.75,99.19,99.83,101.75,101.51\n09/03/2023,100.77,98.87,99.97,101.94,101.52\n10/03/2023,100.55,98.72,100.00,101.85,101.53\n13/03/2023,100.54,98.81,99.97,101.77,101.58\n14/03/2023,100.73,98.99,99.84,101.92,101.59\n15/03/2023,100.77,98.75,99.98,102.07,101.60\n16/03/2023,100.62,98.92,99.81,101.91,101.62\n17/03/2023,100.71,98.85,99.79,102.09,101.63", "type": "text"}]